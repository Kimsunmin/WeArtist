<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<resources location="/images/**" mapping="C:/CODE/"/>
<!--트랜잭션 설정을 위해 tx와 aop 라는 두가지 네임스페이스를 사용한다.
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
 -->


<!-- 
AOP 용어 간단 정리
- Aspect : 기능
- Advice : 언제
- PointCut : 어디서
 -->

 
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!--비동기 통신전용 bean -->
	<beans:bean id="SimpleClientHttpRequestFactory"
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<beans:property name="connectTimeout" value="5000"></beans:property>
		<beans:property name="readTimeout" value="5000"></beans:property>
	</beans:bean>

	<beans:bean
		class="org.springframework.web.client.RestTemplate">
		<beans:constructor-arg name="requestFactory"
			ref="SimpleClientHttpRequestFactory"></beans:constructor-arg>
	</beans:bean>

	<!-- 암호화 전용 bean -->
	<beans:bean
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- 인터셉터 bean -->
	<interceptors>
		<interceptor>
			<!-- uri 패턴 -->
			<mapping path="/**" />
			<beans:bean class="com.we.art.common.interceptor.AuthInterceptor" />
				
		</interceptor>
	</interceptors>

	<!-- 트랜잭션 관리를 위한 빈 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- transactionManager 빈의 프로퍼티로 데이터베이스 설정에 사용했던 dataSource 빈을 참조 (ref="dataSource")-->
		<beans:constructor-arg name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- tx:advice : 공통기능의 구현체를 지정. 그 구현체는 사전에 정의했던 transactionManager를 설정(transaction-manager="transactionManager") -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<!-- 트랜잭션을 지정하기 위한 메서드 네임패턴과 transaction 정책-->
		<!--select로 시작하는 메서드 안에서는 읽기만 가능(insert,update,delete불가 select만 가능)  -->
		<!-- 
			속성으로 적용할 메소드 이름(select, insert, update, delete로 시작하는 메소드)을 지정하고 트랜잭션
			발생 시 어떤 동작을 할지 지정하는 부분. 따라서 이 명칭으로 시작하는 메소드에서 Exception이 발생하면 rollback 한다는 의미.(rollback-for="Exception")
		 -->
			<tx:method name="select*" read-only="true"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/> <!-- 걍 REQUIRED 쓰면됨 -->
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction을 위한 AOP 설정 -->
 	<aop:config>
		<!-- .. : 하위의 모든 패키지를 포함 -->
		<!-- com.we.art.* : art패키지 아래의 1뎁스 패키지만 잡음 -->
		<aop:pointcut expression="execution(* com.we.art..*.*ServiceImpl.*(..))" id="txPointCut"/> 
		<!-- art패키지의 모든패키지에 있는 ServiceImpl로시작하는 모든 클래스의 모든 메서드 -->
		<!-- 
			advice-ref : 공통기능을 가지고 있는 구현체의 빈을 지정
			pointcut-ref : 이를 적용할 대상을 지정	 
			즉, txAdvice에서 지정한 기능들을 txPointCut의 위치제서 적용한다는 의미.
		 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	
	<!-- 클래스와 메소드에 @Transactional 애노테이션을 사용할 수 있게 하는 설정.-->
	<tx:annotation-driven transaction-manager="transactionManager" />
		
	<!-- webSocket Handler -->
	<websocket:handlers>
		<websocket:mapping handler="replyEchoHandler" path="replyEcho"/>
		<websocket:handshake-interceptors>
			<beans:bean 
			class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"></beans:bean>
		</websocket:handshake-interceptors>
	</websocket:handlers>	
	
	<beans:bean id="replyEchoHandler" class="com.we.art.common.chat.handler.EchoHandler"></beans:bean>
		
	<context:component-scan
		base-package="com.we.art" />
</beans:beans>
